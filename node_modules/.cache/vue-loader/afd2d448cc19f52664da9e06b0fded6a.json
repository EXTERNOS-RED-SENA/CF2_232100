{"remainingRequest":"/home/runner/work/CF2_232100/CF2_232100/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF2_232100/CF2_232100/src/views/Tema5.vue?vue&type=template&id=70952ba6&lang=pug","dependencies":[{"path":"/home/runner/work/CF2_232100/CF2_232100/src/views/Tema5.vue","mtime":1734307017910},{"path":"/home/runner/work/CF2_232100/CF2_232100/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF2_232100/CF2_232100/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF2_232100/CF2_232100/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF2_232100/CF2_232100/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF2_232100/CF2_232100/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF2_232100/CF2_232100/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF2_232100/CF2_232100/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01CiAgICAudGl0dWxvLXByaW5jaXBhbC5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIC50aXR1bG8tcHJpbmNpcGFsX19udW1lcm8KICAgICAgICBzcGFuIDUKICAgICAgaDEgSGVycmFtaWVudGFzIHkgbcOpdG9kb3MgZGUgYW7DoWxpc2lzCiAgICAgIAogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQKICAgICAgLmNvbC1sZy04Lm15LWxnLTAubXktMyAgCiAgICAgICAgcCBFbiBsb3Mgc2lzdGVtYXMgcHJvZHVjdGl2b3MgYWdyb3BlY3VhcmlvcywgbGEgcGxhbmlmaWNhY2nDs24geSBnZXN0acOzbiBpbnRlZ3JhZGEgZGUgcmVjdXJzb3MgZXMgZnVuZGFtZW50YWwgcGFyYSBnYXJhbnRpemFyIGxhIGVmaWNpZW5jaWEsIHNvc3RlbmliaWxpZGFkIHkgcmVudGFiaWxpZGFkLiBFc3RhIGdlc3Rpw7NuIGludm9sdWNyYSBsYSBhZG1pbmlzdHJhY2nDs24gY29vcmRpbmFkYSBkZSByZWN1cnNvcyBjbGF2ZSBjb21vIGVsIGFndWEsIGVsIHN1ZWxvLCBsYSBlbmVyZ8OtYSB5IGxvcyBpbnN1bW9zIGFncsOtY29sYXMsIGJ1c2NhbmRvIG1heGltaXphciBsYSBwcm9kdWNjacOzbiBtaWVudHJhcyBzZSBtaW5pbWl6YW4gbG9zIGltcGFjdG9zIG5lZ2F0aXZvcyBzb2JyZSBlbCBtZWRpbyBhbWJpZW50ZS4gIAogICAgICAgIC5iZzIucC00LmJyYWQKICAgICAgICAgIHAubWItMCBMYSBpbnRlZ3JhY2nDs24gZGUgaGVycmFtaWVudGFzIHRlY25vbMOzZ2ljYXMgeSBlc3RyYXRlZ2lhcyBkZSBwbGFuaWZpY2FjacOzbiBiYXNhZGFzIGVuIGRhdG9zIHBlcm1pdGUgYSBsb3MgcHJvZHVjdG9yZXMgdG9tYXIgZGVjaXNpb25lcyBpbmZvcm1hZGFzLCBhZGFwdGFyc2UgYSBjb25kaWNpb25lcyBjYW1iaWFudGVzIHkgb3B0aW1pemFyIGVsIHVzbyBkZSBsb3MgcmVjdXJzb3MgZGlzcG9uaWJsZXMuIEVzdGUgY2Fww610dWxvIGFib3JkYXLDoSBsYSBpbXBvcnRhbmNpYSBkZSBsYSBwbGFuaWZpY2FjacOzbiBhZ3LDrWNvbGEsIGxvcyBtb2RlbG9zIGRlIGdlc3Rpw7NuIGludGVncmFkYSB5IGxhcyBlc3RyYXRlZ2lhcyBwYXJhIG9wdGltaXphciByZWN1cnNvcyBlbiBzaXN0ZW1hcyBwcm9kdWN0aXZvcyBhdXRvbWF0aXphZG9zLgogICAgICAuY29sLWxnLTQubXktbGctMC5teS0zCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvODYucG5nJyBhbHQ9JycpCgoKICAgIFNlcGFyYWRvciAKICAgICN0XzVfMS50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvKGRhdGEtYW9zPSJ6b29tLWluLWxlZnQiKQogICAgICBoMiA1LjEgSW1wb3J0YW5jaWEgZGUgbGEgcGxhbmlmaWNhY2nDs24gYmFzYWRhIGVuIGRhdG9zIAogICAgcCBMYSBwbGFuaWZpY2FjacOzbiBhZ3LDrWNvbGEgYmFzYWRhIGVuIGRhdG9zIGVzIHVuIGVuZm9xdWUgcXVlIHV0aWxpemEgaW5mb3JtYWNpw7NuIGN1YW50aXRhdGl2YSB5IGN1YWxpdGF0aXZhIHJlY29waWxhZGEgZGUgZGl2ZXJzYXMgZnVlbnRlcywgY29tbyBzZW5zb3JlcywgU0lHIHkgYW7DoWxpc2lzIGhpc3TDs3JpY29zLCBwYXJhIHRvbWFyIGRlY2lzaW9uZXMgZXN0cmF0w6lnaWNhcyBlbiBlbCBtYW5lam8gZGUgbG9zIHNpc3RlbWFzIHByb2R1Y3Rpdm9zLCBzaWVuZG8gc3Ugb2JqZXRpdm8gZWwgYXNlZ3VyYXIgcXVlIGNhZGEgcmVjdXJzbyBzZSB1dGlsaWNlIGRlIG1hbmVyYSDDs3B0aW1hLCBhbGluZWFuZG8gbGFzIHByw6FjdGljYXMgYWdyw61jb2xhcyBjb24gbGFzIGNvbmRpY2lvbmVzIGVzcGVjw61maWNhcyBkZWwgZW50b3JubyB5IGxhcyBuZWNlc2lkYWRlcyBkZWwgbWVyY2Fkby4KICAgIC5yb3cuanVzdGlmeS1jb250ZW50LXN0YXJ0Lm10LTUubWItNAogICAgICAuY29sLWF1dG8KICAgICAgICAubGlzdAogICAgICAgICAgLmxpc3RfX2l0ZW0KICAgICAgICAgICAgLmxpc3RfX2l0ZW1fX2ljb24KICAgICAgICAgICAgICBpbWcubXMtMihzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL2ljb24uc3ZnJyBhbHQ9JycpCiAgICAgICAgICAubGlzdF9fdHh0LmJnaWNvbi5icmFkLnAtMC5weC00CiAgICAgICAgICAgIGg0Lm1iLTEgVmVudGFqYXMgZGUgbGEgcGxhbmlmaWNhY2nDs24gYmFzYWRhIGVuIGRhdG9zICAKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIudGV4dC1jZW50ZXIubWItNAogICAgICAuY29sLWxnLTQubXktMwogICAgICAgIC5iZzYuYnJhZC5wLTMuc2hhLmgtMTAwCiAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQubWItNChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzg3LnBuZycgYWx0PScnKQogICAgICAgICAgaDUgVG9tYSBkZSBkZWNpc2lvbmVzIGluZm9ybWFkYQogICAgICAgICAgcCBMb3MgZGF0b3MgcHJlY2lzb3MgeSBhY3R1YWxpemFkb3MgcGVybWl0ZW4gYWp1c3RhciBsYXMgcHLDoWN0aWNhcyBkZSBtYW5lam8gZW4gdGllbXBvIHJlYWwuCgogICAgICAuY29sLWxnLTQubXktMwogICAgICAgIC5iZzYuYnJhZC5wLTMuc2hhLmgtMTAwCiAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQubWItNChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzg4LnBuZycgYWx0PScnKQogICAgICAgICAgaDUgUmVkdWNjacOzbiBkZSByaWVzZ29zIAogICAgICAgICAgcCBMYSBwbGFuaWZpY2FjacOzbiBiYXNhZGEgZW4gZGF0b3MgYXl1ZGEgYSBhbnRpY2lwYXIgcHJvYmxlbWFzIGNvbW8gc2VxdcOtYXMsIHBsYWdhcyBvIGZsdWN0dWFjaW9uZXMgZW4gZWwgbWVyY2Fkby4KCiAgICAgIC5jb2wtbGctNC5teS0zCiAgICAgICAgLmJnNi5icmFkLnAtMy5zaGEuaC0xMDAKICAgICAgICAgIGltZy5pbWctYS5pbWctdC5tYi00KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvODkucG5nJyBhbHQ9JycpCiAgICAgICAgICBoNSBPcHRpbWl6YWNpw7NuIGRlIHJlY3Vyc29zIAogICAgICAgICAgcCBQZXJtaXRlIHVuIHVzbyBlZmljaWVudGUgZGUgaW5zdW1vcywgcmVkdWNpZW5kbyBjb3N0b3MgeSBtZWpvcmFuZG8gbGEgc29zdGVuaWJpbGlkYWQuICAKCiAgICBTZXBhcmFkb3IgCiAgICAjdF81XzIudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkbyhkYXRhLWFvcz0iem9vbS1pbi1sZWZ0IikKICAgICAgaDIgNS4yIE1vZGVsb3MgZGUgZ2VzdGnDs24gaW50ZWdyYWRhIGRlIHJlY3Vyc29zCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQKICAgICAgLmNvbC1sZy01Lm15LWxnLTAubXktMwogICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzkwLnBuZycgYWx0PScnKSAgICAgICAgICAKICAgICAgLmNvbC1sZy03Lm15LWxnLTAubXktMwogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIuYmczLnAtNC5icmFkLmgtMTAwCiAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvOTEucG5nJyBhbHQ9JycpCiAgICAgICAgICAuY29sLnB0LWxnLTAucHQtbWQtNAogICAgICAgICAgICBwLm1iLTAgTGEgZ2VzdGnDs24gaW50ZWdyYWRhIGRlIHJlY3Vyc29zIGltcGxpY2EgbGEgYWRtaW5pc3RyYWNpw7NuIGNvb3JkaW5hZGEgZGUgbG9zIGRpc3RpbnRvcyBpbnN1bW9zIHkgZWxlbWVudG9zIG5hdHVyYWxlcyBxdWUgc29uIGVzZW5jaWFsZXMgcGFyYSBsYSBwcm9kdWNjacOzbiBhZ3JvcGVjdWFyaWEuIEVzdGUgZW5mb3F1ZSBidXNjYSBlcXVpbGlicmFyIGxhIHByb2R1Y2Npw7NuIGNvbiBsYSBjb25zZXJ2YWNpw7NuIGRlIHJlY3Vyc29zLCBwcm9tb3ZpZW5kbyBwcsOhY3RpY2FzIGFncsOtY29sYXMgc29zdGVuaWJsZXMuCgoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LXN0YXJ0Lm10LTUubWItNAogICAgICAuY29sLWF1dG8KICAgICAgICAubGlzdAogICAgICAgICAgLmxpc3RfX2l0ZW0KICAgICAgICAgICAgLmxpc3RfX2l0ZW1fX2ljb24KICAgICAgICAgICAgICBpbWcubXMtMihzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL2ljb24uc3ZnJyBhbHQ9JycpCiAgICAgICAgICAubGlzdF9fdHh0LmJnaWNvbi5icmFkLnAtMC5weC00CiAgICAgICAgICAgIGg0Lm1iLTEgR2VzdGnDs24gaW50ZWdyYWRhIGRlbCBhZ3VhCiAgICBwIEVsIGFndWEgZXMgdW4gcmVjdXJzbyBjcsOtdGljbyBlbiBsb3Mgc2lzdGVtYXMgcHJvZHVjdGl2b3MsIGVzcGVjaWFsbWVudGUgZW4gY29udGV4dG9zIGRlIGNyZWNpZW50ZSBlc2Nhc2V6LiBMYSBnZXN0acOzbiBpbnRlZ3JhZGEgZGVsIGFndWEgaW5jbHV5ZSBlc3RyYXRlZ2lhcyBjb21vIGVsIHJpZWdvIGVmaWNpZW50ZSwgbGEgY2FwdGFjacOzbiBkZSBhZ3VhIGRlIGxsdXZpYSB5IGVsIHJlY2ljbGFqZSBkZSBhZ3VhcyByZXNpZHVhbGVzLgogICAgLnJvdy5iZzguYWxpZ24taXRlbXMtY2VudGVyCiAgICAgIC5jb2wtbGctMTIuY29sLTEyLnB4LWxnLTUucHgtNAogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIgICAgICAgICAgCiAgICAgICAgICAuY29sLWxnLTEyCiAgICAgICAgICAgIC5iZ3cuYnJhZC5wLTUubXktNQogICAgICAgICAgICAgIENhcm91c2VsUkVEKHRpcG89ImIiKQogICAgICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAgICAgICAgIC5jb2wtbGctNi5teS0yCiAgICAgICAgICAgICAgICAgICAgaDUubWItNCBUZWNub2xvZ8OtYXMgY2xhdmUKICAgICAgICAgICAgICAgICAgICB1bC5saXN0YS11bC5mYS11bAogICAgICAgICAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZS5jb2xvcjEKICAgICAgICAgICAgICAgICAgICAgICAgc3BhbiAjW2IgU2lzdGVtYXMgZGUgcmllZ28gYXV0b21hdGl6YWRvOl0gYmFzYWRvcyBlbiBzZW5zb3JlcyBkZSBodW1lZGFkIGRlbCBzdWVsbyB5IGRhdG9zIGNsaW3DoXRpY29zLgogICAgICAgICAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZS5jb2xvcjEKICAgICAgICAgICAgICAgICAgICAgICAgc3BhbiAjW2IgTW9kZWxvcyBkZSBwcmVkaWNjacOzbiBkZSBkZW1hbmRhIGjDrWRyaWNhOl0gY2FsY3VsYW4gbGFzIG5lY2VzaWRhZGVzIGRlIHJpZWdvIGVuIGZ1bmNpw7NuIGRlIGxhcyBjb25kaWNpb25lcyBlc3BlY8OtZmljYXMgZGVsIGN1bHRpdm8geSBlbCBjbGltYS4gICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIC5jb2wtbGctNS5teS0yIAogICAgICAgICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzkyLnBuZycsIGFsdD0nJykgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgICAgICAgICAuY29sLWxnLTYubXktMgogICAgICAgICAgICAgICAgICAgIGg1Lm1iLTQgQmVuZWZpY2lvcwogICAgICAgICAgICAgICAgICAgIHVsLmxpc3RhLXVsLmZhLXVsCiAgICAgICAgICAgICAgICAgICAgICBsaSAKICAgICAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgICAgICAgICBzcGFuIFJlZHVjY2nDs24gZW4gZWwgY29uc3VtbyBkZSBhZ3VhLgogICAgICAgICAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZS5jb2xvcjEKICAgICAgICAgICAgICAgICAgICAgICAgc3BhbiBNZWpvcmEgZW4gbGEgZWZpY2llbmNpYSBkZWwgcmllZ28uCiAgICAgICAgICAgICAgICAgICAgICBsaSAKICAgICAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgICAgICAgICBzcGFuIENvbnNlcnZhY2nDs24gZGUgcmVjdXJzb3MgaMOtZHJpY29zIGEgbGFyZ28gcGxhem8uICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAuY29sLWxnLTUubXktMiAKICAgICAgICAgICAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy85My5wbmcnLCBhbHQ9JycpICAKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNAogICAgICAuY29sLWxnLTgubXktMyAKCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtc3RhcnQubXQtNS5tYi00CiAgICAgICAgICAuY29sLWF1dG8KICAgICAgICAgICAgLmxpc3QKICAgICAgICAgICAgICAubGlzdF9faXRlbQogICAgICAgICAgICAgICAgLmxpc3RfX2l0ZW1fX2ljb24KICAgICAgICAgICAgICAgICAgaW1nLm1zLTIoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy9pY29uLnN2ZycgYWx0PScnKQogICAgICAgICAgICAgIC5saXN0X190eHQuYmdpY29uLmJyYWQucC0wLnB4LTQKICAgICAgICAgICAgICAgIGg0Lm1iLTEgR2VzdGnDs24gaW50ZWdyYWRhIGRlbCBzdWVsbyAgICAgICAgICAgICAgICAgIAogICAgICAgIHAgRWwgbWFuZWpvIHNvc3RlbmlibGUgZGVsIHN1ZWxvIGVzIGZ1bmRhbWVudGFsIHBhcmEgbWFudGVuZXIgbGEgcHJvZHVjdGl2aWRhZCB5IGxhIHNhbHVkIGRlIGxvcyBzaXN0ZW1hcyBhZ3LDrWNvbGFzLiBFc3RvIGluY2x1eWUgcHLDoWN0aWNhcyBjb21vIGxhIHJvdGFjacOzbiBkZSBjdWx0aXZvcywgbGEgaW5jb3Jwb3JhY2nDs24gZGUgbWF0ZXJpYSBvcmfDoW5pY2EgeSBlbCBtb25pdG9yZW8gY29uc3RhbnRlIGRlIGxhIGZlcnRpbGlkYWQgZGVsIHN1ZWxvLgogICAgICAgIC5iZzMucC00LmJyYWQKICAgICAgICAgIGg1IFRlY25vbG9nw61hcyBjbGF2ZQogICAgICAgICAgb2wubGlzdGEtb2wtLWN1YWRyby5mYS11bAogICAgICAgICAgICBsaSAKICAgICAgICAgICAgICAubGlzdGEtb2wtLWN1YWRyb19fdmluZXRhCiAgICAgICAgICAgICAgICBzcGFuLnRleHQtYmxhY2sgMQogICAgICAgICAgICAgIHNwYW4gI1tiIEFuw6FsaXNpcyBnZW9lc3BhY2lhbCBkZWwgc3VlbG86XSB1dGlsaXphbmRvIFNJRyBwYXJhIGlkZW50aWZpY2FyIHpvbmFzIGNvbiBkaWZlcmVudGVzIG5pdmVsZXMgZGUgZmVydGlsaWRhZC4KICAgICAgICAgICAgICAKCiAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgIC5saXN0YS1vbC0tY3VhZHJvX192aW5ldGEKICAgICAgICAgICAgICAgIHNwYW4udGV4dC1ibGFjayAyCiAgICAgICAgICAgICAgc3BhbiAjW2IgU2Vuc29yZXMgZGUgY2FsaWRhZCBkZWwgc3VlbG86XSBtb25pdG9yZWFuIHBILCBjb250ZW5pZG8gZGUgbnV0cmllbnRlcyB5IHNhbGluaWRhZC4gICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgLmNvbC1sZy00Lm15LTMgCiAgICAgICAgaW1nLmltZy1hLmltZy10Lm1iLTQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy85NC5wbmcnIGFsdD0nJykgIAoKICAgIGg1IEJlbmVmaWNpb3MKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNAogICAgICAuY29sLWxnLTQubXktMwogICAgICAgIC5iZzYuYnJhZC5wLTMuc2hhLmgtMTAwCiAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzk1LnBuZycgYWx0PScnKQogICAgICAgICAgICAuY29sLnB0LWxnLTAucHQtbWQtNAogICAgICAgICAgICAgIHAubWItMCBNYW50ZW5pbWllbnRvIGRlIGxhIGVzdHJ1Y3R1cmEgeSBmZXJ0aWxpZGFkIGRlbCBzdWVsby4gIAoKICAgICAgLmNvbC1sZy00Lm15LTMKICAgICAgICAuYmc2LmJyYWQucC0zLnNoYS5oLTEwMAogICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy85Ni5wbmcnIGFsdD0nJykKICAgICAgICAgICAgLmNvbC5wdC1sZy0wLnB0LW1kLTQKICAgICAgICAgICAgICBwLm1iLTAgUHJldmVuY2nDs24gZGUgbGEgZXJvc2nDs24geSBsYSBzYWxpbml6YWNpw7NuLgoKICAgICAgLmNvbC1sZy00Lm15LTMKICAgICAgICAuYmc2LmJyYWQucC0zLnNoYS5oLTEwMAogICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy85Ny5wbmcnIGFsdD0nJykKICAgICAgICAgICAgLmNvbC5wdC1sZy0wLnB0LW1kLTQKICAgICAgICAgICAgICBwLm1iLTAgT3B0aW1pemFjacOzbiBkZSBsYSBhcGxpY2FjacOzbiBkZSBmZXJ0aWxpemFudGVzLgoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LXN0YXJ0Lm10LTUubWItNAogICAgICAuY29sLWF1dG8KICAgICAgICAubGlzdAogICAgICAgICAgLmxpc3RfX2l0ZW0KICAgICAgICAgICAgLmxpc3RfX2l0ZW1fX2ljb24KICAgICAgICAgICAgICBpbWcubXMtMihzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL2ljb24uc3ZnJyBhbHQ9JycpCiAgICAgICAgICAubGlzdF9fdHh0LmJnaWNvbi5icmFkLnAtMC5weC00CiAgICAgICAgICAgIGg0Lm1iLTEgR2VzdGnDs24gaW50ZWdyYWRhIGRlIGxhIGVuZXJnw61hCgogICAgcCBFbCBjb25zdW1vIGRlIGVuZXJnw61hIGVuIGxvcyBzaXN0ZW1hcyBwcm9kdWN0aXZvcyBwdWVkZSBzZXIgc2lnbmlmaWNhdGl2bywgZXNwZWNpYWxtZW50ZSBlbiBhY3RpdmlkYWRlcyBjb21vIGVsIGJvbWJlbyBkZSBhZ3VhLCBsYSBjbGltYXRpemFjacOzbiBkZSBpbnZlcm5hZGVyb3MgeSBlbCBmdW5jaW9uYW1pZW50byBkZSBtYXF1aW5hcmlhIGFncsOtY29sYS4KCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgLmNvbC1sZy00Lm15LWxnLTAubXktMwogICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzk4LnBuZycgYWx0PScnKSAgICAgICAgICAgCiAgICAgIC5jb2wtbGctOC5teS1sZy0wLm15LTMKICAgICAgICBBY2NvcmRpb25SRUQodGlwbz0iYSIgY2xhc2UtdGFyamV0YT0idGFyamV0YSBiZzciKQogICAgICAgICAgZGl2KHRpdHVsbz0iRXN0cmF0ZWdpYXMgZGUgZWZpY2llbmNpYSBlbmVyZ8OpdGljYSIpIAogICAgICAgICAgICB1bC5saXN0YS11bC5mYS11bAogICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgc3BhbiBVc28gZGUgZW5lcmfDrWFzIHJlbm92YWJsZXM6IGNvbW8gcGFuZWxlcyBzb2xhcmVzIHkgYmlvZGlnZXN0b3JlcyBwYXJhIHJlZHVjaXIgbGEgZGVwZW5kZW5jaWEgZGUgY29tYnVzdGlibGVzIGbDs3NpbGVzLgogICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgc3BhbiBBdXRvbWF0aXphY2nDs24gZGUgcHJvY2Vzb3MgZW5lcmfDqXRpY2FtZW50ZSBpbnRlbnNpdm9zOiBvcHRpbWl6YWNpw7NuIGRlbCBjb25zdW1vIGVuIHNpc3RlbWFzIGRlIHJpZWdvIHkgdmVudGlsYWNpw7NuLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgZGl2KHRpdHVsbz0iQmVuZWZpY2lvcyIpIAogICAgICAgICAgICB1bC5saXN0YS11bC5mYS11bAogICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgc3BhbiBSZWR1Y2Npw7NuIGRlIGNvc3RvcyBvcGVyYXRpdm9zLgogICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgc3BhbiBEaXNtaW51Y2nDs24gZGUgbGEgaHVlbGxhIGRlIGNhcmJvbm8gZGVsIHNpc3RlbWEgcHJvZHVjdGl2by4KICAgICAgICAgICAgICBsaSAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZS5jb2xvcjEKICAgICAgICAgICAgICAgIHNwYW4gQ29udHJpYnVjacOzbiBhIGxhIHNvc3RlbmliaWxpZGFkIGFtYmllbnRhbC4KCiAgICBTZXBhcmFkb3IgCiAgICAjdF81XzMudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkbyhkYXRhLWFvcz0iem9vbS1pbi1sZWZ0IikKICAgICAgaDIgNS4zIE9wdGltaXphY2nDs24gZGUgcmVjdXJzb3MgZW4gc2lzdGVtYXMgcHJvZHVjdGl2b3MgYXV0b21hdGl6YWRvcwoKICAgIHAgTGEgYXV0b21hdGl6YWNpw7NuIHBlcm1pdGUgdW4gbWFuZWpvIG3DoXMgcHJlY2lzbyB5IGVmaWNpZW50ZSBkZSBsb3MgcmVjdXJzb3MgZW4gbG9zIHNpc3RlbWFzIHByb2R1Y3Rpdm9zLiBBIHRyYXbDqXMgZGVsIHVzbyBkZSB0ZWNub2xvZ8OtYXMgYXZhbnphZGFzLCBlcyBwb3NpYmxlIGFqdXN0YXIgbGFzIHByw6FjdGljYXMgZGUgbWFuZWpvIGVuIGZ1bmNpw7NuIGRlIGxhcyBjb25kaWNpb25lcyBlc3BlY8OtZmljYXMgZGUgY2FkYSB6b25hIGRlbnRybyBkZSB1bmEgcGFyY2VsYS4KCiAgICAucm93Lmp1c3RpZnktY29udGVudC1zdGFydC5tdC01Lm1iLTQKICAgICAgLmNvbC1hdXRvCiAgICAgICAgLmxpc3QKICAgICAgICAgIC5saXN0X19pdGVtCiAgICAgICAgICAgIC5saXN0X19pdGVtX19pY29uCiAgICAgICAgICAgICAgaW1nLm1zLTIoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy9pY29uLnN2ZycgYWx0PScnKQogICAgICAgICAgLmxpc3RfX3R4dC5iZ2ljb24uYnJhZC5wLTAucHgtNAogICAgICAgICAgICBoNC5tYi0xIFVzbyBkZSBzZW5zb3JlcyBwYXJhIG9wdGltaXphY2nDs24KCiAgICAucm93LmJnOC5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgLmNvbC1sZy0xMi5jb2wtMTIucHgtbGctNS5weC00CiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlciAgICAgICAgICAKICAgICAgICAgIC5jb2wtbGctMTIKICAgICAgICAgICAgLmJndy5icmFkLnAtNS5teS01CiAgICAgICAgICAgICAgQ2Fyb3VzZWxSRUQodGlwbz0iYiIpCiAgICAgICAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgICAgICAgICAgLmNvbC1sZy02Lm15LTIKICAgICAgICAgICAgICAgICAgICBoNS5tYi00IFVzbyBkZSBzZW5zb3JlcyBwYXJhIG9wdGltaXphY2nDs24KICAgICAgICAgICAgICAgICAgICB1bC5saXN0YS11bC5mYS11bAogICAgICAgICAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZS5jb2xvcjEKICAgICAgICAgICAgICAgICAgICAgICAgc3BhbiAjW2IgU2Vuc29yZXMgZGUgaHVtZWRhZCB5IGNhbGlkYWQgZGVsIHN1ZWxvOl0gcHJvdmVlbiBkYXRvcyBlbiB0aWVtcG8gcmVhbCBxdWUgcGVybWl0ZW4gYWp1c3RhciBsYSBhcGxpY2FjacOzbiBkZSByaWVnbyB5IGZlcnRpbGl6YW50ZXMgc2Vnw7puIGxhcyBuZWNlc2lkYWRlcyBlc3BlY8OtZmljYXMgZGVsIGN1bHRpdm8uCiAgICAgICAgICAgICAgICAgICAgICBsaSAKICAgICAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgICAgICAgICBzcGFuICNbYiBTZW5zb3JlcyBjbGltw6F0aWNvczpdIGF5dWRhbiBhIHByZXZlciBjb25kaWNpb25lcyBhZHZlcnNhcywgY29tbyBoZWxhZGFzIG8gc2VxdcOtYXMsIHBlcm1pdGllbmRvIHVuYSByZXNwdWVzdGEgcHJvYWN0aXZhLiAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgLmNvbC1sZy01Lm15LTIgCiAgICAgICAgICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvOTkucG5nJywgYWx0PScnKSAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgICAgICAgICAgLmNvbC1sZy02Lm15LTIKICAgICAgICAgICAgICAgICAgICBoNS5tYi00IEJlbmVmaWNpb3M6CiAgICAgICAgICAgICAgICAgICAgdWwubGlzdGEtdWwuZmEtdWwKICAgICAgICAgICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4gUmVkdWNjacOzbiBkZWwgZGVzcGVyZGljaW8gZGUgaW5zdW1vcy4KICAgICAgICAgICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4gTWVqb3JhIGVuIGxhIHByb2R1Y3RpdmlkYWQgeSB1bmlmb3JtaWRhZCBkZWwgY3VsdGl2by4KICAgICAgICAgICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4gTWVub3IgaW1wYWN0byBhbWJpZW50YWwuICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIC5jb2wtbGctNS5teS0yIAogICAgICAgICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzEwMC5wbmcnLCBhbHQ9JycpCgoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LXN0YXJ0Lm10LTUubWItNAogICAgICAuY29sLWF1dG8KICAgICAgICAubGlzdAogICAgICAgICAgLmxpc3RfX2l0ZW0KICAgICAgICAgICAgLmxpc3RfX2l0ZW1fX2ljb24KICAgICAgICAgICAgICBpbWcubXMtMihzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL2ljb24uc3ZnJyBhbHQ9JycpCiAgICAgICAgICAubGlzdF9fdHh0LmJnaWNvbi5icmFkLnAtMC5weC00CiAgICAgICAgICAgIGg0Lm1iLTEgUGxhdGFmb3JtYXMgZGUgYW7DoWxpc2lzIGRlIGRhdG9zCgogICAgcCBFbCBhbsOhbGlzaXMgZGUgZGF0b3MgcmVjb3BpbGFkb3MgcG9yIHNlbnNvcmVzIHkgb3RyYXMgZnVlbnRlcyBlcyBtdXkgaW1wb3J0YW50ZSBwYXJhIGxhIHRvbWEgZGUgZGVjaXNpb25lcy4gUGxhdGFmb3JtYXMgY29tbyBTQ0FEQSB5IHNvZnR3YXJlIGRlIGFncmljdWx0dXJhIGRlIHByZWNpc2nDs24gaW50ZWdyYW4gZXN0b3MgZGF0b3MsIGZhY2lsaXRhbmRvIHN1IGludGVycHJldGFjacOzbi4KCiAgICBoNSBGdW5jaW9uZXMgY2xhdmUKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi00CiAgICAgIC5jb2wtbGctNC5teS0zCiAgICAgICAgLmJnNi5icmFkLnAtMy5zaGEuaC0xMDAKICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMTAxLnBuZycgYWx0PScnKQogICAgICAgICAgICAuY29sLnB0LWxnLTAucHQtbWQtNAogICAgICAgICAgICAgIHAubWItMCBJZGVudGlmaWNhY2nDs24gZGUgcGF0cm9uZXMgeSB0ZW5kZW5jaWFzLgoKICAgICAgLmNvbC1sZy00Lm15LTMKICAgICAgICAuYmc2LmJyYWQucC0zLnNoYS5oLTEwMAogICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8xMDIucG5nJyBhbHQ9JycpCiAgICAgICAgICAgIC5jb2wucHQtbGctMC5wdC1tZC00CiAgICAgICAgICAgICAgcC5tYi0wIEdlbmVyYWNpw7NuIGRlIGFsZXJ0YXMgeSByZWNvbWVuZGFjaW9uZXMuCgogICAgICAuY29sLWxnLTQubXktMwogICAgICAgIC5iZzYuYnJhZC5wLTMuc2hhLmgtMTAwCiAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzEwMy5wbmcnIGFsdD0nJykKICAgICAgICAgICAgLmNvbC5wdC1sZy0wLnB0LW1kLTQKICAgICAgICAgICAgICBwLm1iLTAgU2ltdWxhY2nDs24gZGUgZXNjZW5hcmlvcyBwYXJhIGV2YWx1YXIgZGlmZXJlbnRlcyBlc3RyYXRlZ2lhcyBkZSBtYW5lam8uCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgIC5jb2wtbGctMTIKICAgICAgICAudGl0dWxvLXNleHRvLmNvbG9yLWFjZW50by1jb250ZW5pZG8KICAgICAgICAgIGg1IEZpZ3VyYSA1LiAKICAgICAgICAgIHNwYW4gUmVzdW1lbiBoZXJyYW1pZW50YXMgeSBtw6l0b2RvcyBkZSBhbsOhbGlzaXMgZW4gc2lzdGVtYXMgcHJvZHVjdGl2b3MgeSBhZ3JvcGVjdWFyaW9zCiAgICAgICAgLmJnZmlnLnAtNC5tYi0xCiAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8xMDQuc3ZnJyBhbHQ9J2xhIGZpZ3VyYSA1IHNlIGRlbm9taW5hIMKrUmVzdW1lbiBoZXJyYW1pZW50YXMgeSBtw6l0b2RvcyBkZSBhbsOhbGlzaXMgZW4gc2lzdGVtYXMgcHJvZHVjdGl2b3MgeSBhZ3JvcGVjdWFyaW9zwrsuIFNlIGRpdmlkZSBlbiBjdWF0cm8gcmFtYXMgcHJpbmNpcGFsZXMgcXVlIGFiYXJjYW4gbGEgcGxhbmlmaWNhY2nDs24geSBnZXN0acOzbiBpbnRlZ3JhZGEgZGUgcmVjdXJzb3MsIGhlcnJhbWllbnRhcyB0ZWNub2zDs2dpY2FzIHBhcmEgZGVjaXNpb25lcyBpbmZvcm1hZGFzLCBtb2RlbG9zIGRlIGdlc3Rpw7NuIGludGVncmFkYSwgeSBlc3RyYXRlZ2lhcyBkZSBvcHRpbWl6YWNpw7NuIGRlIHJlY3Vyc29zIGVuIHNpc3RlbWFzIGF1dG9tYXRpemFkb3MuIENhZGEgcmFtYSBzZSBkZXNnbG9zYSBlbiBzdWJ0ZW1hcyBlc3BlY8OtZmljb3MgcmVsYWNpb25hZG9zIGNvbiBsYSBnZXN0acOzbiBhZ3JvcGVjdWFyaWEsIHNlIGFkanVudGEgbGluaywgcGFyYSBzdSBtZWpvciBvYnNlcnZhY2nDs24uIEh0dHBzOi8vd3d3Lm1pbmRvbW8uY29tL21pbmRtYXAvMGZlYjA1ZTZhMDIxNGZlM2I2MTU5MmY5YjcxNjlhMzEnKSAgCgogICAgICAgIGZpZ2NhcHRpb24ubWItNSBGdWVudGU6IE9JVCwgMjAyNC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAK"},null]}